{"ast":null,"code":"/**\r\n * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion\r\n * which should only be used for elements with a non-presentational role i.e.\r\n * `role=\"none\"` and `role=\"presentation\"` will not be excluded.\r\n *\r\n * Implements aria-hidden semantics (i.e. parent overrides child)\r\n * Ignores \"Child Presentational: True\" characteristics\r\n *\r\n * @param element\r\n * @param options\r\n * @returns {boolean} true if excluded, otherwise false\r\n */\nexport function isInaccessible(element) {\n  var _element$ownerDocumen;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$getComputedS = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS === void 0 ? (_element$ownerDocumen = element.ownerDocument.defaultView) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.getComputedStyle : _options$getComputedS,\n      _options$isSubtreeIna = options.isSubtreeInaccessible,\n      isSubtreeInaccessibleImpl = _options$isSubtreeIna === void 0 ? isSubtreeInaccessible : _options$isSubtreeIna;\n\n  if (typeof getComputedStyle !== \"function\") {\n    throw new TypeError(\"Owner document of the element needs to have an associated window.\");\n  } // since visibility is inherited we can exit early\n\n\n  if (getComputedStyle(element).visibility === \"hidden\") {\n    return true;\n  }\n\n  var currentElement = element;\n\n  while (currentElement) {\n    if (isSubtreeInaccessibleImpl(currentElement, {\n      getComputedStyle: getComputedStyle\n    })) {\n      return true;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return false;\n}\n/**\r\n *\r\n * @param element\r\n * @param options\r\n * @returns {boolean} - `true` if every child of the element is inaccessible\r\n */\n\nexport function isSubtreeInaccessible(element) {\n  var _element$ownerDocumen2;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$getComputedS2 = options.getComputedStyle,\n      getComputedStyle = _options$getComputedS2 === void 0 ? (_element$ownerDocumen2 = element.ownerDocument.defaultView) === null || _element$ownerDocumen2 === void 0 ? void 0 : _element$ownerDocumen2.getComputedStyle : _options$getComputedS2;\n\n  if (typeof getComputedStyle !== \"function\") {\n    throw new TypeError(\"Owner document of the element needs to have an associated window.\");\n  }\n\n  if (element.hidden === true) {\n    return true;\n  }\n\n  if (element.getAttribute(\"aria-hidden\") === \"true\") {\n    return true;\n  }\n\n  if (getComputedStyle(element).display === \"none\") {\n    return true;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}